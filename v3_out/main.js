var SuperCreep = (function () {
    function SuperCreep() {
    }
    SuperCreep.prototype.howManyParts = function (part) {
        return this.body.filter(function (s) { return (s.type == part && s.hits > 0); }).length;
    };
    SuperCreep.prototype.hasPart = function (part) {
        return this.howManyParts(part) > 0;
    };
    SuperCreep.prototype.canMove = function () {
        return this.hasPart(MOVE);
    };
    SuperCreep.prototype.canWork = function () {
        return this.hasPart(WORK);
    };
    SuperCreep.prototype.canHeal = function () {
        return this.hasPart(HEAL);
    };
    SuperCreep.prototype.canAttack = function () {
        return this.hasPart(ATTACK);
    };
    SuperCreep.prototype.canShoot = function () {
        return this.hasPart(RANGED_ATTACK);
    };
    SuperCreep.prototype.canClaim = function () {
        return this.hasPart(CLAIM);
    };
    SuperCreep.prototype.log = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        console.log.apply(console, ["[" + this.name + "]"].concat(msg));
    };
    return SuperCreep;
})();
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
applyMixins(Creep, [SuperCreep]);
var setJob = function (creep, job) {
    Memory['job_workers'][job.name] = creep.name;
    job.creep = creep;
    creep.job = job;
};
var Roles = {
    megaMiner: function (creep, job) {
        creep.log(job.name);
        var sourceId = creep.memory.sId;
        var source;
        if (sourceId != undefined) {
            source = Game.getObjectById(sourceId);
        }
        if (source == undefined) {
            if (!creep.pos.isNearTo(job.start)) {
                creep.moveTo(job.start, { reusePath: 20, maxOps: 1000 });
            }
            creep.log(job.start);
            source = job.start.pos.findClosestByRange(FIND_SOURCES);
            if (source != undefined) {
                creep.memory.sId = source.id;
            }
        }
        if (source != undefined) {
            var err = creep.harvest(source);
            if (err == ERR_NOT_IN_RANGE) {
                err = creep.moveTo(source);
            }
        }
        return err;
    }
};
var Filters = {
    worksAndMoves: function (creep) {
        return creep.canWork() && creep.canMove();
    }
};
var Cmp = {
    worksHard: function (a, b) {
        return b.howManyParts(WORK) - a.howManyParts(WORK);
    },
};
var jobs = [{
        name: "mega_miner_1",
        start: Game.flags['Mine_1_1'],
        jobFunc: Roles['megaMiner'],
        candidateFilter: Filters['worksAndMoves'],
        candidateCmp: Cmp['worksHard']
    }, {
        name: "mega_miner_2",
        start: Game.flags['Mine_1_2'],
        jobFunc: Roles['megaMiner'],
        candidateFilter: Filters['worksAndMoves'],
        candidateCmp: Cmp['worksHard']
    }];
if (Memory['job_workers'] == undefined) {
    console.log("replacing worker map1!!");
    Memory['job_workers'] = {};
}
var creeps = [];
for (var _i = 0, _a = Object.keys(Game.creeps); _i < _a.length; _i++) {
    var n = _a[_i];
    creeps.push(Game.creeps[n]);
}
var seenJobs = {};
var emptyJobs = [];
for (var _b = 0; _b < jobs.length; _b++) {
    var job = jobs[_b];
    if (seenJobs[job.name]) {
        console.log("DUPLICATE JOB IN LIST!! " + job.name);
    }
    seenJobs[job.name] = true;
    var creepName = Memory['job_workers'][job.name];
    var creep;
    if (creepName != undefined) {
        creep = Game.creeps[creepName];
        if (creep == undefined) {
            console.log("Bad creep found, replacing: " + JSON.stringify(creep));
            delete Memory['job_workers'][job.name];
            creepName = undefined;
        }
        else {
            setJob(creep, job);
        }
    }
    if (creepName == undefined) {
        emptyJobs.push(job);
    }
}
var noJob = function (c) {
    return c.job == undefined;
};
for (var _c = 0; _c < emptyJobs.length; _c++) {
    var job = emptyJobs[_c];
    console.log("Need to replace creep for job " + job.name);
    var candidates = creeps.filter(noJob).filter(job.candidateFilter).sort(job.candidateCmp);
    if (candidates.length > 0) {
        var creep = candidates[0];
        console.log("Picked creep for job " + job.name + " got " + creep.name);
        setJob(creep, job);
    }
    else {
        console.log("no candidates for job=" + job.name);
        continue;
    }
}
job = null;
for (var _d = 0; _d < creeps.length; _d++) {
    creep = creeps[_d];
    if (creep.job != undefined) {
        creep.log("job=" + creep.job.name);
        creep.job.jobFunc(creep, creep.job);
    }
    else {
        creep.log("Nothing to do");
    }
}
//# sourceMappingURL=data:application/json;base64,