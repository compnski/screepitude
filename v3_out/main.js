var SuperCreep = (function () {
    function SuperCreep() {
    }
    SuperCreep.prototype.howManyParts = function (part) {
        return this.body.filter(function (s) { return (s.type == part && s.hits > 0); }).length;
    };
    SuperCreep.prototype.hasPart = function (part) {
        return this.howManyParts(part) > 0;
    };
    SuperCreep.prototype.canMove = function () {
        return this.hasPart(MOVE);
    };
    SuperCreep.prototype.canWork = function () {
        return this.hasPart(WORK);
    };
    SuperCreep.prototype.canHeal = function () {
        return this.hasPart(HEAL);
    };
    SuperCreep.prototype.canAttack = function () {
        return this.hasPart(ATTACK);
    };
    SuperCreep.prototype.canShoot = function () {
        return this.hasPart(RANGED_ATTACK);
    };
    SuperCreep.prototype.canClaim = function () {
        return this.hasPart(CLAIM);
    };
    SuperCreep.prototype.log = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        console.log.apply(console, ["[" + this.name + "]"].concat(msg));
    };
    return SuperCreep;
})();
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
applyMixins(Creep, [SuperCreep]);
var JOB_COMPLETE = 999;
var Job = (function () {
    function Job(opts) {
        if (opts === void 0) { opts = {}; }
        this.name = opts['name'];
        var np = opts['namePrefix'];
        if (np != undefined) {
            if (Memory["jobCounts"] == undefined)
                Memory["jobCounts"] = {};
            if (Memory["jobCounts"][np] == undefined)
                Memory["jobCounts"][np] = 0;
            Memory["jobCounts"][np] += 1;
            this.name = np + "_" + Memory["jobCounts"][np];
        }
        this.start = opts['start'];
        this.end = opts['end'];
        this.jobFunc = opts['jobFunc'];
        this.candidateFilter = opts['candidateFilter'];
        this.candidateCmp = opts['candidateCmp'];
    }
    Job.prototype.toJSON = function () {
        var jobFn = this.jobFunc;
        var filterFn = this.candidateFilter;
        var cmpFn = this.candidateCmp;
        console.log(this.start, this.name);
        var ret = {
            name: this.name,
            start: this.start.id,
            jobFunc: RolesReverse[jobFn],
            candidateFilter: FiltersReverse[filterFn],
            candidateCmp: CmpReverse[cmpFn]
        };
        if (this.end != undefined) {
            ret['end'] = this.end.id;
        }
        console.log(JSON.stringify(ret));
        return ret;
    };
    return Job;
})();
var parseJob = function (k, v) {
    console.log("Parse: ", k, "   ", JSON.stringify(v));
    switch (k) {
        case 'start':
        case 'end':
            var r = Game.getObjectById(v);
            if (r == undefined) {
                console.log("FAILED TO LOAD " + k + " from " + v);
            }
            return r;
            break;
        case 'jobFunc':
            return Roles[v];
            break;
        case 'candidateFilter':
            return Filters[v];
            break;
        case 'candidateCmp':
            return Cmp[v];
            break;
        case '':
            return v.map(function (o) { return new Job(o); });
    }
    return v;
};
var setJob = function (creep, job) {
    Memory['job_workers'][job.name] = creep.name;
    job.creep = creep;
    creep.job = job;
};
var clearJob = function (creep, job) {
    delete Memory['job_workers'][job.name];
    delete job.creep;
    delete creep.job;
};
var getMyStructuresInAllRooms = function (structTypes) {
    var structs = [];
    for (var _i = 0, _a = Object.keys(Game.rooms); _i < _a.length; _i++) {
        var roomName = _a[_i];
        structs.push.apply(getMyStructuresInRoom(roomName, structTypes));
    }
    return structs;
};
var needsEnergy = function (s) {
    switch (s.structureType) {
        case STRUCTURE_STORAGE:
            return s.store.energy < s.storeCapacity;
        case STRUCTURE_TOWER:
            return s.energy < s.energyCapacity * .75;
        case STRUCTURE_SPAWN, STRUCTURE_EXTENSION, STRUCTURE_LINK, STRUCTURE_POWER_SPAWN:
            return s.energy < s.energyCapacity;
    }
    return false;
};
var getMyStructuresInRoom = function (roomName, structTypes) {
    var room = Game.rooms[roomName];
    if (room == undefined) {
        console.log("Can't find room " + roomName);
        return [];
    }
    if (room["my_structures"] == undefined) {
        room["my_structures"] = room.find(FIND_MY_STRUCTURES);
    }
    return room["my_structures"].filter(function (s) { return structTypes.indexOf(s.structureType) > -1; });
};
var findNearestStorage = function (target) {
    var stores = getMyStructuresInRoom(target.pos.roomName, [STRUCTURE_STORAGE]).filter(needsEnergy);
    if (stores.length == 0)
        stores = getMyStructuresInRoom(target.pos.roomName, [STRUCTURE_TOWER]).filter(needsEnergy);
    if (stores.length == 0)
        stores = getMyStructuresInAllRooms([STRUCTURE_STORAGE]).filter(needsEnergy);
    if (stores.length == 0)
        stores = getMyStructuresInAllRooms([STRUCTURE_SPAWN]).filter(needsEnergy);
    return target.pos.findClosestByRange(stores);
};
var createCarryJob = function (target) {
    return new Job({
        namePrefix: 'carry',
        start: target,
        end: findNearestStorage(target),
        jobFunc: Roles['carry'],
        candidateFilter: Filters['carriesAndMoves'],
        candidateCmp: Cmp['carriesTheMost'],
    });
};
var createDeliverJob = function (target) {
    return new Job({
        namePrefix: 'carry',
        start: findNearestStorage(target),
        jobFunc: Roles['deliver'],
        candidateFilter: Filters['hasEneryAndMoves'],
        candidateCmp: Cmp['noop'],
    });
};
var runAllJobs = function (staticJobs, memJobs) {
    var addJob = function (job) {
        memJobs.push(job);
    };
    var removeJob = function (job) {
        var idx = memJobs.indexOf(job);
        if (idx < 0)
            return;
        memJobs.splice(idx, 1);
    };
    var jobs = staticJobs.concat(memJobs);
    if (Memory['job_workers'] == undefined) {
        console.log("replacing worker map1!!");
        Memory['job_workers'] = {};
    }
    var creeps = [];
    for (var _i = 0, _a = Object.keys(Game.creeps); _i < _a.length; _i++) {
        var n = _a[_i];
        creeps.push(Game.creeps[n]);
    }
    var seenJobs = {};
    for (var _b = 0; _b < jobs.length; _b++) {
        var job = jobs[_b];
        if (seenJobs[job.name]) {
            console.log("DUPLICATE JOB IN LIST!! " + job.name);
        }
        seenJobs[job.name] = true;
        var creepName = Memory['job_workers'][job.name];
        var creep;
        if (creepName != undefined) {
            creep = Game.creeps[creepName];
            if (creep == undefined) {
                console.log("Bad creep found, replacing: " + JSON.stringify(creep));
                delete Memory['job_workers'][job.name];
                creepName = undefined;
            }
            else {
                setJob(creep, job);
            }
        }
    }
    var GATHER_THRESHOLD = 200;
    for (var _c = 0, _d = Object.keys(Game.rooms); _c < _d.length; _c++) {
        var roomName = _d[_c];
        var room = Game.rooms[roomName];
        var resources = room.find(FIND_DROPPED_RESOURCES);
        var resourcesById = {};
        for (var _e = 0; _e < jobs.length; _e++) {
            var job = jobs[_e];
            if (job.start == undefined)
                continue;
            if (job.jobFunc == Roles["carry"] && job.start["resourceType"] == RESOURCE_ENERGY) {
                if (resourcesById[job.start.id] == undefined) {
                    resourcesById[job.start.id] = 0;
                }
                if (job.creep != undefined) {
                    resourcesById[job.start.id] += job.creep.carryCapacity - job.creep.carry.energy;
                }
                else {
                    resourcesById[job.start.id] = Infinity;
                }
            }
        }
        for (var _f = 0; _f < resources.length; _f++) {
            var resource = resources[_f];
            var currentlyAllocatedCapacity = resourcesById[resource.id] || 0;
            if ((resource.amount - currentlyAllocatedCapacity) > GATHER_THRESHOLD) {
                addJob(createCarryJob(resource));
            }
        }
    }
    var noJob = function (c) {
        return c.job == undefined;
    };
    for (var _g = 0; _g < jobs.length; _g++) {
        var job = jobs[_g];
        if (job.creep != undefined) {
            continue;
        }
        console.log("Need to replace creep for job " + job.name);
        console.log(job.candidateFilter);
        var candidates = creeps.filter(noJob).filter(job.candidateFilter).sort(job.candidateCmp);
        if (candidates.length > 0) {
            var creep = candidates[0];
            console.log("Picked creep for job " + job.name + " got " + creep.name);
            setJob(creep, job);
        }
        else {
            console.log("no candidates for job=" + job.name);
            continue;
        }
    }
    job = null;
    for (var _h = 0; _h < creeps.length; _h++) {
        var creep = creeps[_h];
        if (creep.job != undefined) {
            creep.log("job=" + creep.job.name);
            if (creep.job.start == undefined) {
                removeJob(creep.job);
                clearJob(creep, creep.job);
                continue;
            }
            var ret = creep.job.jobFunc(creep, creep.job);
            if (ret == JOB_COMPLETE) {
                creep.log("Job complete!");
                removeJob(creep.job);
                clearJob(creep, creep.job);
            }
        }
        else {
            addJob(createDeliverJob(creep));
            creep.log("Nothing to do");
        }
    }
};
var hasEnergy = function (s) {
    if (s.amount != undefined) {
        return s.amount > 0;
    }
    if (s.store != undefined) {
        return s.store.energy > 0;
    }
    if (s.carry != undefined) {
        return s.carry.energy > 0;
    }
    if (s.energy != undefined) {
        return s.energy > 0;
    }
    return false;
};
var Roles = {
    megaMiner: function (creep, job) {
        var sourceId = creep.memory.sId;
        var source;
        if (sourceId != undefined) {
            source = Game.getObjectById(sourceId);
        }
        if (source == undefined) {
            if (!creep.pos.isNearTo(job.start)) {
                creep.moveTo(job.start, { reusePath: 20, maxOps: 1000 });
            }
            creep.log(job.start);
            source = job.start.pos.findClosestByRange(FIND_SOURCES);
            if (source != undefined) {
                creep.memory.sId = source.id;
            }
        }
        if (source != undefined) {
            var err = creep.harvest(source);
            if (err == ERR_NOT_IN_RANGE) {
                err = creep.moveTo(source);
            }
        }
        return err;
    },
    deliver: function (creep, job) {
        if (creep.carry.energy == 0) {
            return JOB_COMPLETE;
        }
        if (!creep.pos.isNearTo(job.start)) {
            creep.moveTo(job.start, { reusePath: 20, maxOps: 1000 });
        }
        else {
            var err = creep.transferEnergy(job.start);
            if (err == ERR_NOT_IN_RANGE) {
                err = creep.moveTo(job.start);
            }
        }
        return err;
    },
    carry: function (creep, job) {
        if (job.start != undefined && creep.carry.energy < creep.carryCapacity && hasEnergy(job.start)) {
            if (!creep.pos.isNearTo(job.start)) {
                creep.moveTo(job.start, { reusePath: 20, maxOps: 1000 });
            }
            else {
                var err = creep.pickup(job.start);
                if (err == ERR_NOT_IN_RANGE) {
                    err = creep.moveTo(job.start);
                }
            }
        }
        else {
            job.jobFunc = Roles['deliver'];
            job.start = job.end;
            if (job.end == undefined) {
                job.end = findNearestStorage(creep);
            }
            delete job.end;
        }
        return err;
    }
};
var RolesReverse = {};
for (var _i = 0, _a = Object.keys(Roles); _i < _a.length; _i++) {
    var rn = _a[_i];
    var fn = Roles[rn];
    RolesReverse[fn] = rn;
}
var Filters = {
    worksAndMoves: function (creep) {
        return creep.canWork() && creep.canMove();
    },
    carriesAndMoves: function (creep) {
        return creep.carryCapacity > creep.carry.energy && creep.canMove();
    },
    hasEneryAndMoves: function (creep) {
        return creep.carry.energy > 0 && creep.canMove();
    }
};
var FiltersReverse = {};
for (var _b = 0, _c = Object.keys(Filters); _b < _c.length; _b++) {
    var rn = _c[_b];
    var fn = Filters[rn];
    FiltersReverse[fn] = rn;
}
var Cmp = {
    worksHard: function (a, b) {
        return b.howManyParts(WORK) - a.howManyParts(WORK);
    },
    carriesTheMost: function (a, b) {
        return (a.carryCapacity - a.carry.energy) - (b.carryCapacity - b.carry.energy);
    },
    noop: function (a, b) {
        return 0;
    }
};
var CmpReverse = {};
for (var _d = 0, _e = Object.keys(Cmp); _d < _e.length; _d++) {
    var rn = _e[_d];
    var fn = Cmp[rn];
    CmpReverse[fn] = rn;
}
;
var staticJobs = [new Job({
        name: "mega_miner_1",
        start: Game.flags['Mine_1_1'],
        jobFunc: Roles['megaMiner'],
        candidateFilter: Filters['worksAndMoves'],
        candidateCmp: Cmp['worksHard'],
    }), new Job({
        name: "mega_miner_2",
        start: Game.flags['Mine_1_2'],
        jobFunc: Roles['megaMiner'],
        candidateFilter: Filters['worksAndMoves'],
        candidateCmp: Cmp['worksHard'],
    })];
var memJobs = [];
try {
    memJobs = JSON.parse(Memory["jobs"], parseJob);
}
catch (ex) {
    console.log("Error parsing in memory jobs!: " + ex + "\n  " + Memory["jobs"]);
    console.log(ex.stack);
}
var preJobTs = Game.cpu.getUsed();
runAllJobs(staticJobs, memJobs);
var postJobTs = Game.cpu.getUsed();
Memory["jobs"] = JSON.stringify(memJobs);
Game.Roles = Roles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3YzL2dsb2JhbHMudHMiLCIuLi92My9tYWluLnRzIl0sIm5hbWVzIjpbIlN1cGVyQ3JlZXAiLCJTdXBlckNyZWVwLmNvbnN0cnVjdG9yIiwiU3VwZXJDcmVlcC5ob3dNYW55UGFydHMiLCJTdXBlckNyZWVwLmhhc1BhcnQiLCJTdXBlckNyZWVwLmNhbk1vdmUiLCJTdXBlckNyZWVwLmNhbldvcmsiLCJTdXBlckNyZWVwLmNhbkhlYWwiLCJTdXBlckNyZWVwLmNhbkF0dGFjayIsIlN1cGVyQ3JlZXAuY2FuU2hvb3QiLCJTdXBlckNyZWVwLmNhbkNsYWltIiwiU3VwZXJDcmVlcC5sb2ciLCJhcHBseU1peGlucyIsIkpvYiIsIkpvYi5jb25zdHJ1Y3RvciIsIkpvYi50b0pTT04iXSwibWFwcGluZ3MiOiJBQU9BO0lBQUFBO0lBaURBQyxDQUFDQTtJQW5DR0QsaUNBQVlBLEdBQVpBLFVBQWFBLElBQVdBO1FBQ3RCRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFBQSxDQUFDQSxJQUFNQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFBQTtJQUNoRkEsQ0FBQ0E7SUFFREYsNEJBQU9BLEdBQVBBLFVBQVFBLElBQVlBO1FBQ2xCRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFBQTtJQUNwQ0EsQ0FBQ0E7SUFFREgsNEJBQU9BLEdBQVBBO1FBQ0lJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQzlCQSxDQUFDQTtJQUVESiw0QkFBT0EsR0FBUEE7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LE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQzNCLGVBQWUsRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO1FBQ3pDLFlBQVksRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDO0tBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBSUgsSUFBSSxPQUFPLEdBQVUsRUFBRSxDQUFDO0FBQ3hCLElBQUksQ0FBQztJQUNELE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUNsRCxDQUFFO0FBQUEsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEdBQUcsRUFBRSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBS0QsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUNqQyxVQUFVLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQy9CLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7QUFFbEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7QUFVeEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwic2NyZWVwcy5kLnRzXCIgLz5cblxuXG5pbnRlcmZhY2UgU2NyZWVwIGV4dGVuZHMgQ3JlZXAsIFN1cGVyQ3JlZXB7XG4gICAgam9iPyA6IEpvYjtcbn1cblxuY2xhc3MgU3VwZXJDcmVlcCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGVuZXJneTogbnVtYmVyO1xuICAgIGJvZHk6IHtcblxuICAgICAgICAvKiogT25lIG9mIHRoZSBib2R5IHBhcnRzIGNvbnN0YW50cy4gKi9cbiAgICAgICAgdHlwZTogc3RyaW5nO1xuXG4gICAgICAgIC8qKiBUaGUgcmVtYWluaW5nIGFtb3VudCBvZiBoaXQgcG9pbnRzIG9mIHRoaXMgYm9keSBwYXJ0LiAqL1xuICAgICAgICBoaXRzOiBudW1iZXJcblxuICAgIH1bXTtcblxuXG4gICAgaG93TWFueVBhcnRzKHBhcnQ6c3RyaW5nKTpudW1iZXIge1xuICAgICAgcmV0dXJuIHRoaXMuYm9keS5maWx0ZXIocyA9PiB7IHJldHVybiAocy50eXBlID09IHBhcnQgJiYgcy5oaXRzID4gMCkgfSkubGVuZ3RoIFxuICAgIH1cblxuICAgIGhhc1BhcnQocGFydDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5ob3dNYW55UGFydHMocGFydCkgPiAwXG4gICAgfVxuXG4gICAgY2FuTW92ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzUGFydChNT1ZFKTtcbiAgICB9XG5cbiAgICBjYW5Xb3JrKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQYXJ0KFdPUkspO1xuICAgIH1cblxuICAgIGNhbkhlYWwoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1BhcnQoSEVBTCk7XG4gICAgfVxuXG4gICAgY2FuQXR0YWNrKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQYXJ0KEFUVEFDSyk7XG4gICAgfVxuXG4gICAgY2FuU2hvb3QoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1BhcnQoUkFOR0VEX0FUVEFDSyk7XG4gICAgfVxuXG4gICAgY2FuQ2xhaW0oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1BhcnQoQ0xBSU0pO1xuICAgIH1cblxuICAgIGxvZyguLi5tc2cpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbXCIrdGhpcy5uYW1lK1wiXVwiLCAuLi5tc2cpXG4gICAgfVxufVxuXG5cblxuXG5mdW5jdGlvbiBhcHBseU1peGlucyhkZXJpdmVkQ3RvcjogYW55LCBiYXNlQ3RvcnM6IGFueVtdKSB7XG4gICAgYmFzZUN0b3JzLmZvckVhY2goYmFzZUN0b3IgPT4ge1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiYXNlQ3Rvci5wcm90b3R5cGUpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgICBkZXJpdmVkQ3Rvci5wcm90b3R5cGVbbmFtZV0gPSBiYXNlQ3Rvci5wcm90b3R5cGVbbmFtZV07XG4gICAgICAgIH0pXG4gICAgfSk7IFxufVxuXG5cbmFwcGx5TWl4aW5zKENyZWVwLCBbU3VwZXJDcmVlcF0pXG5cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJzY3JlZXBzLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImdsb2JhbHMudHNcIiAvPlxuXG4vL3JlcXVpcmUoJ2dsb2JhbHMnKVxuXG4vLyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTdXBlckNyZWVwLnByb3RvdHlwZSkuZm9yRWFjaChuYW1lID0+IHtcbi8vICAgQ3JlZXAucHJvdG90eXBlW25hbWVdID0gU3VwZXJDcmVlcC5wcm90b3R5cGVbbmFtZV1cbi8vIH0pXG5cbnR5cGUgSm9iRnVuYyA9IChjcmVlcDogU2NyZWVwLCBqb2I6IEpvYikgPT4gbnVtYmVyO1xudHlwZSBDcmVlcEZpbHRlciA9IChjcmVlcDogU2NyZWVwKSA9PiBib29sZWFuO1xudHlwZSBDcmVlcENtcCA9IChhOiBDcmVlcCwgYjogU2NyZWVwKSA9PiBudW1iZXI7XG5cblxudmFyIEpPQl9DT01QTEVURSA9IDk5OVxuXG5pbnRlcmZhY2UgUG9zaXRpb25FbnRpdHkge1xuICAgIHBvczogUm9vbVBvc2l0aW9uXG4gICAgaWQ6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgRW5lcmd5SG9sZGVyIGV4dGVuZHMgU3RydWN0dXJlIHtcbiAgICBlbmVyZ3k6IG51bWJlcjtcbiAgICBlbmVyZ3lDYXBhY2l0eTogbnVtYmVyO1xufVxuXG5jbGFzcyBKb2Ige1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdGFydDogUG9zaXRpb25FbnRpdHk7XG4gICAgZW5kOiBQb3NpdGlvbkVudGl0eTtcbiAgICBqb2JGdW5jOiBKb2JGdW5jO1xuICAgIGNhbmRpZGF0ZUZpbHRlcjogQ3JlZXBGaWx0ZXI7XG4gICAgY2FuZGlkYXRlQ21wOiBDcmVlcENtcDtcbiAgICBjcmVlcDogU2NyZWVwOyAvLyBTZXQgZHVyaW5nIGV4ZWN1dGlvbmdcblxuXG4gICAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG9wdHNbJ25hbWUnXVxuXG4gICAgICAgIHZhciBucCA9IG9wdHNbJ25hbWVQcmVmaXgnXVxuICAgICAgICBpZiAobnAgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoTWVtb3J5W1wiam9iQ291bnRzXCJdID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBNZW1vcnlbXCJqb2JDb3VudHNcIl0gPSB7fTtcbiAgICAgICAgICAgIGlmIChNZW1vcnlbXCJqb2JDb3VudHNcIl1bbnBdID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBNZW1vcnlbXCJqb2JDb3VudHNcIl1bbnBdID0gMDtcbiAgICAgICAgICAgIE1lbW9yeVtcImpvYkNvdW50c1wiXVtucF0gKz0gMTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5wICsgXCJfXCIgKyBNZW1vcnlbXCJqb2JDb3VudHNcIl1bbnBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGFydCA9IG9wdHNbJ3N0YXJ0J11cbiAgICAgICAgdGhpcy5lbmQgPSBvcHRzWydlbmQnXVxuICAgICAgICB0aGlzLmpvYkZ1bmMgPSBvcHRzWydqb2JGdW5jJ11cbiAgICAgICAgdGhpcy5jYW5kaWRhdGVGaWx0ZXIgPSBvcHRzWydjYW5kaWRhdGVGaWx0ZXInXVxuICAgICAgICB0aGlzLmNhbmRpZGF0ZUNtcCA9IG9wdHNbJ2NhbmRpZGF0ZUNtcCddXG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICB2YXIgam9iRm46IGFueSA9IHRoaXMuam9iRnVuYztcbiAgICAgICAgdmFyIGZpbHRlckZuOiBhbnkgPSB0aGlzLmNhbmRpZGF0ZUZpbHRlcjtcbiAgICAgICAgdmFyIGNtcEZuOiBhbnkgPSB0aGlzLmNhbmRpZGF0ZUNtcDtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGFydCwgdGhpcy5uYW1lKVxuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc3RhcnQuaWQsXG4gICAgICAgICAgICBqb2JGdW5jOiBSb2xlc1JldmVyc2Vbam9iRm5dLFxuICAgICAgICAgICAgY2FuZGlkYXRlRmlsdGVyOiBGaWx0ZXJzUmV2ZXJzZVtmaWx0ZXJGbl0sXG4gICAgICAgICAgICBjYW5kaWRhdGVDbXA6IENtcFJldmVyc2VbY21wRm5dXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmVuZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldFsnZW5kJ10gPSB0aGlzLmVuZC5pZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXQpKVxuICAgICAgICByZXR1cm4gcmV0XG4gICAgfVxufVxuXG52YXIgcGFyc2VKb2IgPSAoazogc3RyaW5nLCB2KTogYW55ID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlBhcnNlOiBcIiwgaywgXCIgICBcIiwgSlNPTi5zdHJpbmdpZnkodikpXG4gICAgc3dpdGNoIChrKSB7XG4gICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgIHZhciByID0gR2FtZS5nZXRPYmplY3RCeUlkKHYpXG4gICAgICAgICAgICBpZiAociA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZBSUxFRCBUTyBMT0FEIFwiICsgayArIFwiIGZyb20gXCIgKyB2KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnam9iRnVuYyc6XG4gICAgICAgICAgICByZXR1cm4gUm9sZXNbdl07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2FuZGlkYXRlRmlsdGVyJzpcbiAgICAgICAgICAgIHJldHVybiBGaWx0ZXJzW3ZdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NhbmRpZGF0ZUNtcCc6XG4gICAgICAgICAgICByZXR1cm4gQ21wW3ZdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICByZXR1cm4gdi5tYXAobz0+IHsgcmV0dXJuIG5ldyBKb2IobykgfSlcbiAgICB9XG4gICAgcmV0dXJuIHZcbn1cblxudmFyIHNldEpvYiA9IChjcmVlcDogU2NyZWVwLCBqb2I6IEpvYikgPT4ge1xuICAgIE1lbW9yeVsnam9iX3dvcmtlcnMnXVtqb2IubmFtZV0gPSBjcmVlcC5uYW1lO1xuICAgIGpvYi5jcmVlcCA9IGNyZWVwO1xuICAgIGNyZWVwLmpvYiA9IGpvYjtcbn1cblxudmFyIGNsZWFySm9iID0gKGNyZWVwOiBTY3JlZXAsIGpvYjogSm9iKSA9PiB7XG4gICAgZGVsZXRlIE1lbW9yeVsnam9iX3dvcmtlcnMnXVtqb2IubmFtZV07XG4gICAgZGVsZXRlIGpvYi5jcmVlcFxuICAgIGRlbGV0ZSBjcmVlcC5qb2Jcbn1cblxudmFyIGdldE15U3RydWN0dXJlc0luQWxsUm9vbXMgPSAoc3RydWN0VHlwZXM6IHN0cmluZ1tdKTogU3RydWN0dXJlW10gPT4ge1xuICAgIHZhciBzdHJ1Y3RzID0gW11cbiAgICBmb3IgKHZhciByb29tTmFtZSBvZiBPYmplY3Qua2V5cyhHYW1lLnJvb21zKSkge1xuICAgICAgICBzdHJ1Y3RzLnB1c2guYXBwbHkoZ2V0TXlTdHJ1Y3R1cmVzSW5Sb29tKHJvb21OYW1lLCBzdHJ1Y3RUeXBlcykpXG4gICAgfVxuICAgIHJldHVybiBzdHJ1Y3RzO1xufVxuXG52YXIgbmVlZHNFbmVyZ3kgPSAoczogU3RydWN0dXJlKTogYm9vbGVhbiA9PiB7XG4gICAgc3dpdGNoIChzLnN0cnVjdHVyZVR5cGUpIHtcbiAgICAgICAgY2FzZSBTVFJVQ1RVUkVfU1RPUkFHRTpcbiAgICAgICAgICAgIHJldHVybiAoPFN0b3JhZ2U+cykuc3RvcmUuZW5lcmd5IDwgKDxTdG9yYWdlPnMpLnN0b3JlQ2FwYWNpdHk7XG4gICAgICAgIGNhc2UgU1RSVUNUVVJFX1RPV0VSOlxuICAgICAgICAgICAgcmV0dXJuICg8VG93ZXI+cykuZW5lcmd5IDwgKDxUb3dlcj5zKS5lbmVyZ3lDYXBhY2l0eSAqIC43NVxuICAgICAgICBjYXNlIFNUUlVDVFVSRV9TUEFXTiwgU1RSVUNUVVJFX0VYVEVOU0lPTiwgU1RSVUNUVVJFX0xJTkssIFNUUlVDVFVSRV9QT1dFUl9TUEFXTjpcbiAgICAgICAgICAgIHJldHVybiAoPEVuZXJneUhvbGRlcj5zKS5lbmVyZ3kgPCAoPEVuZXJneUhvbGRlcj5zKS5lbmVyZ3lDYXBhY2l0eVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxudmFyIGdldE15U3RydWN0dXJlc0luUm9vbSA9IChyb29tTmFtZTogc3RyaW5nLCBzdHJ1Y3RUeXBlczogc3RyaW5nW10pOiBTdHJ1Y3R1cmVbXSA9PiB7XG4gICAgdmFyIHJvb206IFJvb20gPSBHYW1lLnJvb21zW3Jvb21OYW1lXVxuICAgIGlmIChyb29tID09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBUT0RPOiBMb2c/XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuJ3QgZmluZCByb29tIFwiICsgcm9vbU5hbWUpXG4gICAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBpZiAocm9vbVtcIm15X3N0cnVjdHVyZXNcIl0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJvb21bXCJteV9zdHJ1Y3R1cmVzXCJdID0gcm9vbS5maW5kKEZJTkRfTVlfU1RSVUNUVVJFUylcbiAgICB9XG4gICAgcmV0dXJuIHJvb21bXCJteV9zdHJ1Y3R1cmVzXCJdLmZpbHRlcihzPT4geyByZXR1cm4gc3RydWN0VHlwZXMuaW5kZXhPZihzLnN0cnVjdHVyZVR5cGUpID4gLTEgfSlcbn1cblxudmFyIGZpbmROZWFyZXN0U3RvcmFnZSA9ICh0YXJnZXQ6IFBvc2l0aW9uRW50aXR5KTogU3RydWN0dXJlID0+IHtcbiAgICB2YXIgc3RvcmVzID0gZ2V0TXlTdHJ1Y3R1cmVzSW5Sb29tKHRhcmdldC5wb3Mucm9vbU5hbWUsIFtTVFJVQ1RVUkVfU1RPUkFHRV0pLmZpbHRlcihuZWVkc0VuZXJneSlcbiAgICBpZiAoc3RvcmVzLmxlbmd0aCA9PSAwKVxuICAgICAgICBzdG9yZXMgPSBnZXRNeVN0cnVjdHVyZXNJblJvb20odGFyZ2V0LnBvcy5yb29tTmFtZSwgW1NUUlVDVFVSRV9UT1dFUl0pLmZpbHRlcihuZWVkc0VuZXJneSlcbiAgICBpZiAoc3RvcmVzLmxlbmd0aCA9PSAwKVxuICAgICAgICBzdG9yZXMgPSBnZXRNeVN0cnVjdHVyZXNJbkFsbFJvb21zKFtTVFJVQ1RVUkVfU1RPUkFHRV0pLmZpbHRlcihuZWVkc0VuZXJneSlcbiAgICBpZiAoc3RvcmVzLmxlbmd0aCA9PSAwKVxuICAgICAgICBzdG9yZXMgPSBnZXRNeVN0cnVjdHVyZXNJbkFsbFJvb21zKFtTVFJVQ1RVUkVfU1BBV05dKS5maWx0ZXIobmVlZHNFbmVyZ3kpXG4gICAgcmV0dXJuIHRhcmdldC5wb3MuZmluZENsb3Nlc3RCeVJhbmdlKHN0b3Jlcylcbn1cblxudmFyIGNyZWF0ZUNhcnJ5Sm9iID0gKHRhcmdldDogUG9zaXRpb25FbnRpdHkpOiBKb2IgPT4ge1xuXG4gICAgcmV0dXJuIG5ldyBKb2Ioe1xuICAgICAgICBuYW1lUHJlZml4OiAnY2FycnknLFxuICAgICAgICBzdGFydDogdGFyZ2V0LFxuICAgICAgICBlbmQ6IGZpbmROZWFyZXN0U3RvcmFnZSh0YXJnZXQpLFxuICAgICAgICBqb2JGdW5jOiBSb2xlc1snY2FycnknXSxcbiAgICAgICAgY2FuZGlkYXRlRmlsdGVyOiBGaWx0ZXJzWydjYXJyaWVzQW5kTW92ZXMnXSxcbiAgICAgICAgY2FuZGlkYXRlQ21wOiBDbXBbJ2NhcnJpZXNUaGVNb3N0J10sXG4gICAgfSlcbn1cblxudmFyIGNyZWF0ZURlbGl2ZXJKb2IgPSAodGFyZ2V0OiBQb3NpdGlvbkVudGl0eSk6IEpvYiA9PiB7XG5cbiAgICByZXR1cm4gbmV3IEpvYih7XG4gICAgICAgIG5hbWVQcmVmaXg6ICdjYXJyeScsXG4gICAgICAgIHN0YXJ0OiBmaW5kTmVhcmVzdFN0b3JhZ2UodGFyZ2V0KSxcbiAgICAgICAgam9iRnVuYzogUm9sZXNbJ2RlbGl2ZXInXSxcbiAgICAgICAgY2FuZGlkYXRlRmlsdGVyOiBGaWx0ZXJzWydoYXNFbmVyeUFuZE1vdmVzJ10sXG4gICAgICAgIGNhbmRpZGF0ZUNtcDogQ21wWydub29wJ10sXG4gICAgfSlcbn1cblxuLy8gVE9ETzogQVBJIHRvIGFkZCBqb2JzLCBzb21lIHdheSB0byBjb21iaW5lIGluLW1lbW9yeSBqb2JzIHdpdGggaW4tY29kZSBqb2JzXG4vLyBmaXRuZXNzIGZ1bmMgZm9yIGNhbmRpZGF0ZXMgYmFzZWQgb24gZGlzdGFuY2UuXG5cbi8vIFRPRE86IEEgd2F5IGZvciBqb2JzIHRvIGJlIGRvbmUgYW5kIGdldCBjbGVhcmVkLlxuLy8gQmFzZWQgb24gc29tZSByZXR1cm4gdmFsdWUgZnJvbSBqb2JGdW5jID9cbnZhciBydW5BbGxKb2JzID0gKHN0YXRpY0pvYnM6IEpvYltdLCBtZW1Kb2JzOiBKb2JbXSkgPT4ge1xuXG4gICAgdmFyIGFkZEpvYiA9IChqb2I6IEpvYikgPT4ge1xuICAgICAgICBtZW1Kb2JzLnB1c2goam9iKVxuICAgIH1cblxuICAgIHZhciByZW1vdmVKb2IgPSAoam9iOiBKb2IpID0+IHtcbiAgICAgICAgdmFyIGlkeCA9IG1lbUpvYnMuaW5kZXhPZihqb2IpXG4gICAgICAgIGlmIChpZHggPCAwKSByZXR1cm5cbiAgICAgICAgbWVtSm9icy5zcGxpY2UoaWR4LCAxKVxuICAgIH1cblxuICAgIHZhciBqb2JzID0gc3RhdGljSm9icy5jb25jYXQobWVtSm9icylcblxuICAgIGlmIChNZW1vcnlbJ2pvYl93b3JrZXJzJ10gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVwbGFjaW5nIHdvcmtlciBtYXAxISFcIilcbiAgICAgICAgTWVtb3J5Wydqb2Jfd29ya2VycyddID0ge31cbiAgICB9XG4gICAgdmFyIGNyZWVwczogU2NyZWVwW10gPSBbXVxuICAgIGZvciAodmFyIG4gb2YgT2JqZWN0LmtleXMoR2FtZS5jcmVlcHMpKSB7XG4gICAgICAgIGNyZWVwcy5wdXNoKEdhbWUuY3JlZXBzW25dKVxuICAgIH1cblxuICAgIHZhciBzZWVuSm9iczogeyBbaW5kZXg6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9XG5cblxuICAgIGZvciAodmFyIGpvYiBvZiBqb2JzKSB7XG4gICAgICAgIC8vIENoZWNrIGZvciBEdXBlXG4gICAgICAgIGlmIChzZWVuSm9ic1tqb2IubmFtZV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRFVQTElDQVRFIEpPQiBJTiBMSVNUISEgXCIgKyBqb2IubmFtZSlcbiAgICAgICAgfVxuICAgICAgICBzZWVuSm9ic1tqb2IubmFtZV0gPSB0cnVlXG5cbiAgICAgICAgdmFyIGNyZWVwTmFtZTogc3RyaW5nID0gTWVtb3J5Wydqb2Jfd29ya2VycyddW2pvYi5uYW1lXTtcbiAgICAgICAgdmFyIGNyZWVwOiBTY3JlZXA7XG4gICAgICAgIGlmIChjcmVlcE5hbWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjcmVlcCA9IEdhbWUuY3JlZXBzW2NyZWVwTmFtZV1cbiAgICAgICAgICAgIGlmIChjcmVlcCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJhZCBjcmVlcCBmb3VuZCwgcmVwbGFjaW5nOiBcIiArIEpTT04uc3RyaW5naWZ5KGNyZWVwKSlcbiAgICAgICAgICAgICAgICBkZWxldGUgTWVtb3J5Wydqb2Jfd29ya2VycyddW2pvYi5uYW1lXTtcbiAgICAgICAgICAgICAgICBjcmVlcE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEpvYihjcmVlcCwgam9iKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSm9iIGNyZWF0b3JzXG4gICAgdmFyIEdBVEhFUl9USFJFU0hPTEQgPSAyMDAgLy8gVE9ETzogU2V0IGJhc2VkIG9uIGF2YWlsYWJsZSBjcmVlcHNcbiAgICBmb3IgKHZhciByb29tTmFtZSBvZiBPYmplY3Qua2V5cyhHYW1lLnJvb21zKSkge1xuICAgICAgICB2YXIgcm9vbSA9IEdhbWUucm9vbXNbcm9vbU5hbWVdXG4gICAgICAgIHZhciByZXNvdXJjZXMgPSByb29tLmZpbmQoRklORF9EUk9QUEVEX1JFU09VUkNFUylcbiAgICAgICAgdmFyIHJlc291cmNlc0J5SWQ6IHsgW2luZGV4OiBzdHJpbmddOiBudW1iZXIgfSA9IHt9XG4gICAgICAgIGZvciAodmFyIGpvYiBvZiBqb2JzKSB7XG4gICAgICAgICAgICBpZiAoam9iLnN0YXJ0ID09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoam9iLmpvYkZ1bmMgPT0gUm9sZXNbXCJjYXJyeVwiXSAmJiBqb2Iuc3RhcnRbXCJyZXNvdXJjZVR5cGVcIl0gPT0gUkVTT1VSQ0VfRU5FUkdZKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlc0J5SWRbam9iLnN0YXJ0LmlkXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzQnlJZFtqb2Iuc3RhcnQuaWRdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGpvYi5jcmVlcCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzQnlJZFtqb2Iuc3RhcnQuaWRdICs9IGpvYi5jcmVlcC5jYXJyeUNhcGFjaXR5IC0gam9iLmNyZWVwLmNhcnJ5LmVuZXJneTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHdhbnQgb25lIGVtcHR5IGpvYiBwZXIgcmVzb3VyY2UsIGRlZmF1bHQgdG8gaW5maW5pdHkgaWYgdGhlcmUgYXJlIG5vIGNyZWVwc1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNCeUlkW2pvYi5zdGFydC5pZF0gPSBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudGx5QWxsb2NhdGVkQ2FwYWNpdHkgPSByZXNvdXJjZXNCeUlkW3Jlc291cmNlLmlkXSB8fCAwO1xuICAgICAgICAgICAgaWYgKChyZXNvdXJjZS5hbW91bnQgLSBjdXJyZW50bHlBbGxvY2F0ZWRDYXBhY2l0eSkgPiBHQVRIRVJfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgICAgYWRkSm9iKGNyZWF0ZUNhcnJ5Sm9iKHJlc291cmNlKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gQWxsb2NhdGUgam9ic1xuXG5cbiAgICB2YXIgbm9Kb2IgPSAoYzogU2NyZWVwKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBjLmpvYiA9PSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqb2Igb2Ygam9icykge1xuICAgICAgICBpZiAoam9iLmNyZWVwICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy9waWNrIG5ldyBvbmVcbiAgICAgICAgY29uc29sZS5sb2coXCJOZWVkIHRvIHJlcGxhY2UgY3JlZXAgZm9yIGpvYiBcIiArIGpvYi5uYW1lKVxuICAgICAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgY3VycnlpbmcgdG8gcGFzcyBqb2IgaW50byBjbXAgZnVuY3Rpb25cbiAgICAgICAgY29uc29sZS5sb2coam9iLmNhbmRpZGF0ZUZpbHRlcilcbiAgICAgICAgdmFyIGNhbmRpZGF0ZXM6IFNjcmVlcFtdID0gY3JlZXBzLmZpbHRlcihub0pvYikuZmlsdGVyKGpvYi5jYW5kaWRhdGVGaWx0ZXIpLnNvcnQoam9iLmNhbmRpZGF0ZUNtcClcbiAgICAgICAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNyZWVwOiBTY3JlZXAgPSBjYW5kaWRhdGVzWzBdO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJQaWNrZWQgY3JlZXAgZm9yIGpvYiBcIiArIGpvYi5uYW1lICsgXCIgZ290IFwiICsgY3JlZXAubmFtZSk7XG4gICAgICAgICAgICBzZXRKb2IoY3JlZXAsIGpvYik7XG4gICAgICAgICAgICAvLyBjYWxsIHNldEpvYj8/P1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJubyBjYW5kaWRhdGVzIGZvciBqb2I9XCIgKyBqb2IubmFtZSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgam9iID0gbnVsbFxuICAgIGZvciAodmFyIGNyZWVwIG9mIGNyZWVwcykge1xuICAgICAgICBpZiAoY3JlZXAuam9iICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3JlZXAubG9nKFwiam9iPVwiICsgY3JlZXAuam9iLm5hbWUpXG4gICAgICAgICAgICBpZiAoY3JlZXAuam9iLnN0YXJ0ID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQ2xlYW51cFxuICAgICAgICAgICAgICAgIHJlbW92ZUpvYihjcmVlcC5qb2IpXG4gICAgICAgICAgICAgICAgY2xlYXJKb2IoY3JlZXAsIGNyZWVwLmpvYilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXQgPSBjcmVlcC5qb2Iuam9iRnVuYyhjcmVlcCwgY3JlZXAuam9iKVxuICAgICAgICAgICAgaWYgKHJldCA9PSBKT0JfQ09NUExFVEUpIHtcbiAgICAgICAgICAgICAgICBjcmVlcC5sb2coXCJKb2IgY29tcGxldGUhXCIpXG4gICAgICAgICAgICAgICAgcmVtb3ZlSm9iKGNyZWVwLmpvYilcbiAgICAgICAgICAgICAgICBjbGVhckpvYihjcmVlcCwgY3JlZXAuam9iKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkSm9iKGNyZWF0ZURlbGl2ZXJKb2IoY3JlZXApKVxuICAgICAgICAgICAgY3JlZXAubG9nKFwiTm90aGluZyB0byBkb1wiKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbnZhciBoYXNFbmVyZ3kgPSAocykgPT4ge1xuICAgIGlmIChzLmFtb3VudCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHMuYW1vdW50ID4gMDtcbiAgICB9XG5cbiAgICBpZiAocy5zdG9yZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHMuc3RvcmUuZW5lcmd5ID4gMDtcbiAgICB9XG4gICAgaWYgKHMuY2FycnkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzLmNhcnJ5LmVuZXJneSA+IDBcbiAgICB9XG4gICAgaWYgKHMuZW5lcmd5ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcy5lbmVyZ3kgPiAwXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufVxuXG52YXIgUm9sZXM6IHsgW2luZGV4OiBzdHJpbmddOiBKb2JGdW5jIH0gPSB7XG4gICAgbWVnYU1pbmVyOiAoY3JlZXA6IFNjcmVlcCwgam9iOiBKb2IpOiBudW1iZXIgPT4ge1xuICAgICAgICB2YXIgc291cmNlSWQgPSBjcmVlcC5tZW1vcnkuc0lkO1xuXG4gICAgICAgIHZhciBzb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2VJZCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IEdhbWUuZ2V0T2JqZWN0QnlJZChzb3VyY2VJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICghY3JlZXAucG9zLmlzTmVhclRvKGpvYi5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICBjcmVlcC5tb3ZlVG8oam9iLnN0YXJ0LCB7IHJldXNlUGF0aDogMjAsIG1heE9wczogMTAwMCB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlZXAubG9nKGpvYi5zdGFydClcbiAgICAgICAgICAgIHNvdXJjZSA9IGpvYi5zdGFydC5wb3MuZmluZENsb3Nlc3RCeVJhbmdlKEZJTkRfU09VUkNFUylcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY3JlZXAubWVtb3J5LnNJZCA9IHNvdXJjZS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGVyciA9IGNyZWVwLmhhcnZlc3Qoc291cmNlKTtcbiAgICAgICAgICAgIGlmIChlcnIgPT0gRVJSX05PVF9JTl9SQU5HRSkge1xuICAgICAgICAgICAgICAgIGVyciA9IGNyZWVwLm1vdmVUbyhzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfSxcblxuICAgIGRlbGl2ZXI6IChjcmVlcDogU2NyZWVwLCBqb2I6IEpvYik6IG51bWJlciA9PiB7XG4gICAgICAgIGlmIChjcmVlcC5jYXJyeS5lbmVyZ3kgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEpPQl9DT01QTEVURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNyZWVwLnBvcy5pc05lYXJUbyhqb2Iuc3RhcnQpKSB7XG4gICAgICAgICAgICBjcmVlcC5tb3ZlVG8oam9iLnN0YXJ0LCB7IHJldXNlUGF0aDogMjAsIG1heE9wczogMTAwMCB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVyciA9IGNyZWVwLnRyYW5zZmVyRW5lcmd5KDxTdHJ1Y3R1cmU+am9iLnN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChlcnIgPT0gRVJSX05PVF9JTl9SQU5HRSkge1xuICAgICAgICAgICAgICAgIGVyciA9IGNyZWVwLm1vdmVUbyhqb2Iuc3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJcbiAgICB9LFxuXG4gICAgY2Fycnk6IChjcmVlcDogU2NyZWVwLCBqb2I6IEpvYik6IG51bWJlciA9PiB7XG5cbiAgICAgICAgaWYgKGpvYi5zdGFydCAhPSB1bmRlZmluZWQgJiYgY3JlZXAuY2FycnkuZW5lcmd5IDwgY3JlZXAuY2FycnlDYXBhY2l0eSAmJiBoYXNFbmVyZ3koam9iLnN0YXJ0KSkge1xuICAgICAgICAgICAgaWYgKCFjcmVlcC5wb3MuaXNOZWFyVG8oam9iLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIGNyZWVwLm1vdmVUbyhqb2Iuc3RhcnQsIHsgcmV1c2VQYXRoOiAyMCwgbWF4T3BzOiAxMDAwIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBjcmVlcC5waWNrdXAoPEVuZXJneT5qb2Iuc3RhcnQpO1xuICAgICAgICAgICAgICAgIGlmIChlcnIgPT0gRVJSX05PVF9JTl9SQU5HRSkge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBjcmVlcC5tb3ZlVG8oam9iLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqb2Iuam9iRnVuYyA9IFJvbGVzWydkZWxpdmVyJ11cbiAgICAgICAgICAgIGpvYi5zdGFydCA9IGpvYi5lbmRcbiAgICAgICAgICAgIGlmIChqb2IuZW5kID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGpvYi5lbmQgPSBmaW5kTmVhcmVzdFN0b3JhZ2UoY3JlZXApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgam9iLmVuZFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxufVxudmFyIFJvbGVzUmV2ZXJzZSA9IHt9XG5mb3IgKHZhciBybiBvZiBPYmplY3Qua2V5cyhSb2xlcykpIHtcbiAgICB2YXIgZm46IGFueSA9IFJvbGVzW3JuXVxuICAgIFJvbGVzUmV2ZXJzZVtmbl0gPSByblxufVxuXG5cbnZhciBGaWx0ZXJzOiB7IFtpbmRleDogc3RyaW5nXTogQ3JlZXBGaWx0ZXIgfSA9IHtcbiAgICB3b3Jrc0FuZE1vdmVzOiAoY3JlZXA6IFNjcmVlcCk6IGJvb2xlYW49PiB7XG4gICAgICAgIHJldHVybiBjcmVlcC5jYW5Xb3JrKCkgJiYgY3JlZXAuY2FuTW92ZSgpO1xuICAgIH0sXG5cbiAgICBjYXJyaWVzQW5kTW92ZXM6IChjcmVlcDogU2NyZWVwKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBjcmVlcC5jYXJyeUNhcGFjaXR5ID4gY3JlZXAuY2FycnkuZW5lcmd5ICYmIGNyZWVwLmNhbk1vdmUoKTtcbiAgICB9LFxuICAgIGhhc0VuZXJ5QW5kTW92ZXM6IChjcmVlcDogU2NyZWVwKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBjcmVlcC5jYXJyeS5lbmVyZ3kgPiAwICYmIGNyZWVwLmNhbk1vdmUoKTtcbiAgICB9XG5cbn1cbnZhciBGaWx0ZXJzUmV2ZXJzZSA9IHt9XG5mb3IgKHZhciBybiBvZiBPYmplY3Qua2V5cyhGaWx0ZXJzKSkge1xuICAgIHZhciBmbjogYW55ID0gRmlsdGVyc1tybl1cbiAgICBGaWx0ZXJzUmV2ZXJzZVtmbl0gPSByblxufVxuXG52YXIgQ21wOiB7IFtpbmRleDogc3RyaW5nXTogQ3JlZXBDbXAgfSA9IHtcbiAgICB3b3Jrc0hhcmQ6IChhOiBTY3JlZXAsIGI6IFNjcmVlcCk6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiBiLmhvd01hbnlQYXJ0cyhXT1JLKSAtIGEuaG93TWFueVBhcnRzKFdPUkspXG4gICAgfSxcblxuICAgIGNhcnJpZXNUaGVNb3N0OiAoYTogU2NyZWVwLCBiOiBTY3JlZXApOiBudW1iZXIgPT4ge1xuICAgICAgICByZXR1cm4gKGEuY2FycnlDYXBhY2l0eSAtIGEuY2FycnkuZW5lcmd5KSAtIChiLmNhcnJ5Q2FwYWNpdHkgLSBiLmNhcnJ5LmVuZXJneSlcbiAgICB9LFxuICAgIG5vb3A6IChhOiBTY3JlZXAsIGI6IFNjcmVlcCk6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuXG4gICAgLy8gY2xvc2VUb1N0YXJ0OiAoYTpDcmVlcCwgYjpDcmVlcCkgOiBudW1iZXIgPT4ge1xuICAgIC8vICAgICByZXR1cm4gYS5wb3MuZ2V0UmFuZ2VUbyhjcmVlcC5qb2Iuc3RhcnQpIC0gYi5wb3MuZ2V0UmFuZ2VUbyhjcmVlcC5qb2Iuc3RhcnQpO1xuICAgIC8vIH1cbn1cbnZhciBDbXBSZXZlcnNlID0ge31cbmZvciAodmFyIHJuIG9mIE9iamVjdC5rZXlzKENtcCkpIHtcbiAgICB2YXIgZm46IGFueSA9IENtcFtybl07XG4gICAgQ21wUmV2ZXJzZVtmbl0gPSBybjtcbn07XG5cblxudmFyIHN0YXRpY0pvYnM6IEpvYltdID0gW25ldyBKb2Ioe1xuICAgIG5hbWU6IFwibWVnYV9taW5lcl8xXCIsXG4gICAgc3RhcnQ6IEdhbWUuZmxhZ3NbJ01pbmVfMV8xJ10sXG4gICAgam9iRnVuYzogUm9sZXNbJ21lZ2FNaW5lciddLFxuICAgIGNhbmRpZGF0ZUZpbHRlcjogRmlsdGVyc1snd29ya3NBbmRNb3ZlcyddLFxuICAgIGNhbmRpZGF0ZUNtcDogQ21wWyd3b3Jrc0hhcmQnXSxcbn0pLCBuZXcgSm9iKHtcbiAgICBuYW1lOiBcIm1lZ2FfbWluZXJfMlwiLFxuICAgIHN0YXJ0OiBHYW1lLmZsYWdzWydNaW5lXzFfMiddLFxuICAgIGpvYkZ1bmM6IFJvbGVzWydtZWdhTWluZXInXSxcbiAgICBjYW5kaWRhdGVGaWx0ZXI6IEZpbHRlcnNbJ3dvcmtzQW5kTW92ZXMnXSxcbiAgICBjYW5kaWRhdGVDbXA6IENtcFsnd29ya3NIYXJkJ10sXG59KV1cblxuXG5cbnZhciBtZW1Kb2JzOiBKb2JbXSA9IFtdO1xudHJ5IHtcbiAgICBtZW1Kb2JzID0gSlNPTi5wYXJzZShNZW1vcnlbXCJqb2JzXCJdLCBwYXJzZUpvYilcbn0gY2F0Y2ggKGV4KSB7XG4gICAgY29uc29sZS5sb2coXCJFcnJvciBwYXJzaW5nIGluIG1lbW9yeSBqb2JzITogXCIgKyBleCArIFwiXFxuICBcIiArIE1lbW9yeVtcImpvYnNcIl0pXG4gICAgY29uc29sZS5sb2coZXguc3RhY2spXG59XG5cblxuXG5cbnZhciBwcmVKb2JUcyA9IEdhbWUuY3B1LmdldFVzZWQoKVxucnVuQWxsSm9icyhzdGF0aWNKb2JzLCBtZW1Kb2JzKVxudmFyIHBvc3RKb2JUcyA9IEdhbWUuY3B1LmdldFVzZWQoKVxuXG5NZW1vcnlbXCJqb2JzXCJdID0gSlNPTi5zdHJpbmdpZnkobWVtSm9icylcbi8vY29uc29sZS5sb2cocG9zdEpvYlRzIC0gcHJlSm9iVHMpXG5cbi8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGpvYnMpKVxuLy8gY29uc29sZS5sb2coXG5cbi8vdmFyIGpvYnM6Sm9iW10gPSBbXVxuXG5cblxuR2FtZS5Sb2xlcyA9IFJvbGVzIl19