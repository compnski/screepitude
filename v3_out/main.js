var SuperCreep = (function () {
    function SuperCreep() {
    }
    SuperCreep.prototype.howManyParts = function (part) {
        return this.body.filter(function (s) { return (s.type == part && s.hits > 0); }).length;
    };
    SuperCreep.prototype.hasPart = function (part) {
        return this.howManyParts(part) > 0;
    };
    SuperCreep.prototype.canMove = function () {
        return this.hasPart(MOVE);
    };
    SuperCreep.prototype.canWork = function () {
        return this.hasPart(WORK);
    };
    SuperCreep.prototype.canHeal = function () {
        return this.hasPart(HEAL);
    };
    SuperCreep.prototype.canAttack = function () {
        return this.hasPart(ATTACK);
    };
    SuperCreep.prototype.canShoot = function () {
        return this.hasPart(RANGED_ATTACK);
    };
    SuperCreep.prototype.canClaim = function () {
        return this.hasPart(CLAIM);
    };
    SuperCreep.prototype.log = function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i - 0] = arguments[_i];
        }
        console.log.apply(console, ["[" + this.name + "]"].concat(msg));
    };
    return SuperCreep;
})();
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
applyMixins(Creep, [SuperCreep]);
var Job = (function () {
    function Job(opts) {
        if (opts === void 0) { opts = {}; }
        this.name = opts['name'];
        this.start = opts['start'];
        this.end = opts['end'];
        this.jobFunc = opts['jobFunc'];
        this.candidateFilter = opts['candidateFilter'];
        this.candidateCmp = opts['candidateCmp'];
    }
    Job.prototype.toJSON = function () {
        var jobFn = this.jobFunc;
        var filterFn = this.candidateFilter;
        var cmpFn = this.candidateCmp;
        var ret = {
            name: this.name,
            start: this.start.id,
            jobFunc: RolesReverse[jobFn],
            candidateFilter: FiltersReverse[filterFn],
            candidateCmp: CmpReverse[cmpFn]
        };
        if (this.end != undefined) {
            ret['end'] = this.end.id;
        }
        return ret;
    };
    return Job;
})();
var parseJob = function (k, v) {
    switch (k) {
        case 'start', 'end':
            return Game.getObjectById(v);
            break;
        case 'jobFunc':
            return Roles[v];
            break;
        case 'candidateFilter':
            return Filters[v];
            break;
        case 'candidateCmp':
            return Cmp[v];
            break;
    }
    return v;
};
var setJob = function (creep, job) {
    Memory['job_workers'][job.name] = creep.name;
    job.creep = creep;
    creep.job = job;
};
var Roles = {
    megaMiner: function (creep, job) {
        creep.log(job.name);
        var sourceId = creep.memory.sId;
        var source;
        if (sourceId != undefined) {
            source = Game.getObjectById(sourceId);
        }
        if (source == undefined) {
            if (!creep.pos.isNearTo(job.start)) {
                creep.moveTo(job.start, { reusePath: 20, maxOps: 1000 });
            }
            creep.log(job.start);
            source = job.start.pos.findClosestByRange(FIND_SOURCES);
            if (source != undefined) {
                creep.memory.sId = source.id;
            }
        }
        if (source != undefined) {
            var err = creep.harvest(source);
            if (err == ERR_NOT_IN_RANGE) {
                err = creep.moveTo(source);
            }
        }
        return err;
    }
};
var RolesReverse = {};
for (var _i = 0, _a = Object.keys(Roles); _i < _a.length; _i++) {
    var rn = _a[_i];
    var fn = Roles[rn];
    RolesReverse[fn] = rn;
}
var Filters = {
    worksAndMoves: function (creep) {
        return creep.canWork() && creep.canMove();
    }
};
var FiltersReverse = {};
for (var _b = 0, _c = Object.keys(Filters); _b < _c.length; _b++) {
    var rn = _c[_b];
    var fn = Filters[rn];
    FiltersReverse[fn] = rn;
}
var Cmp = {
    worksHard: function (a, b) {
        return b.howManyParts(WORK) - a.howManyParts(WORK);
    },
};
var CmpReverse = {};
for (var _d = 0, _e = Object.keys(Cmp); _d < _e.length; _d++) {
    var rn = _e[_d];
    var fn = Cmp[rn];
    CmpReverse[fn] = rn;
}
;
var jobs = [new Job({
        name: "mega_miner_1",
        start: Game.flags['Mine_1_1'],
        jobFunc: Roles['megaMiner'],
        candidateFilter: Filters['worksAndMoves'],
        candidateCmp: Cmp['worksHard'],
    }), new Job({
        name: "mega_miner_2",
        start: Game.flags['Mine_1_2'],
        jobFunc: Roles['megaMiner'],
        candidateFilter: Filters['worksAndMoves'],
        candidateCmp: Cmp['worksHard'],
    })];
console.log(JSON.stringify(jobs));
console.log(JSON.parse(JSON.stringify(jobs[0]), parseJob).jobFunc);
if (Memory['job_workers'] == undefined) {
    console.log("replacing worker map1!!");
    Memory['job_workers'] = {};
}
var creeps = [];
for (var _f = 0, _g = Object.keys(Game.creeps); _f < _g.length; _f++) {
    var n = _g[_f];
    creeps.push(Game.creeps[n]);
}
var seenJobs = {};
var emptyJobs = [];
for (var _h = 0; _h < jobs.length; _h++) {
    var job = jobs[_h];
    if (seenJobs[job.name]) {
        console.log("DUPLICATE JOB IN LIST!! " + job.name);
    }
    seenJobs[job.name] = true;
    var creepName = Memory['job_workers'][job.name];
    var creep;
    if (creepName != undefined) {
        creep = Game.creeps[creepName];
        if (creep == undefined) {
            console.log("Bad creep found, replacing: " + JSON.stringify(creep));
            delete Memory['job_workers'][job.name];
            creepName = undefined;
        }
        else {
            setJob(creep, job);
        }
    }
    if (creepName == undefined) {
        emptyJobs.push(job);
    }
}
var noJob = function (c) {
    return c.job == undefined;
};
for (var _j = 0; _j < emptyJobs.length; _j++) {
    var job = emptyJobs[_j];
    console.log("Need to replace creep for job " + job.name);
    var candidates = creeps.filter(noJob).filter(job.candidateFilter).sort(job.candidateCmp);
    if (candidates.length > 0) {
        var creep = candidates[0];
        console.log("Picked creep for job " + job.name + " got " + creep.name);
        setJob(creep, job);
    }
    else {
        console.log("no candidates for job=" + job.name);
        continue;
    }
}
job = null;
for (var _k = 0; _k < creeps.length; _k++) {
    creep = creeps[_k];
    if (creep.job != undefined) {
        creep.log("job=" + creep.job.name);
        creep.job.jobFunc(creep, creep.job);
    }
    else {
        creep.log("Nothing to do");
    }
}
Game.Roles = Roles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3YzL2dsb2JhbHMudHMiLCIuLi92My9tYWluLnRzIl0sIm5hbWVzIjpbIlN1cGVyQ3JlZXAiLCJTdXBlckNyZWVwLmNvbnN0cnVjdG9yIiwiU3VwZXJDcmVlcC5ob3dNYW55UGFydHMiLCJTdXBlckNyZWVwLmhhc1BhcnQiLCJTdXBlckNyZWVwLmNhbk1vdmUiLCJTdXBlckNyZWVwLmNhbldvcmsiLCJTdXBlckNyZWVwLmNhbkhlYWwiLCJTdXBlckNyZWVwLmNhbkF0dGFjayIsIlN1cGVyQ3JlZXAuY2FuU2hvb3QiLCJTdXBlckNyZWVwLmNhbkNsYWltIiwiU3VwZXJDcmVlcC5sb2ciLCJhcHBseU1peGlucyIsIkpvYiIsIkpvYi5jb25zdHJ1Y3RvciIsIkpvYi50b0pTT04iXSwibWFwcGluZ3MiOiJBQU9BO0lBQUFBO0lBZ0RBQyxDQUFDQTtJQW5DR0QsaUNBQVlBLEdBQVpBLFVBQWFBLElBQVdBO1FBQ3RCRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFBQSxDQUFDQSxJQUFNQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFBQTtJQUNoRkEsQ0FBQ0E7SUFFREYsNEJBQU9BLEdBQVBBLFVBQVFBLElBQVlBO1FBQ2xCRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFBQTtJQUNwQ0EsQ0FBQ0E7SUFFREgsNEJBQU9BLEdBQVBBO1FBQ0lJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQzlCQSxDQUFDQTtJQUVESiw0QkFBT0EsR0FBUEE7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LENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxLQUFLLEdBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFdkIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEQsUUFBUSxDQUFDO0lBQ2IsQ0FBQztDQUNKO0FBRUQsR0FBRyxHQUFHLElBQUksQ0FBQTtBQUNWLEdBQUcsQ0FBQyxDQUFVLFVBQU0sRUFBZixrQkFBSyxFQUFMLElBQWUsQ0FBQztJQUFoQixLQUFLLEdBQUksTUFBTSxJQUFWO0lBQ04sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxTQUFTLENBQUMsQ0FBQSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixLQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQzlCLENBQUM7Q0FDSjtBQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNjcmVlcHMuZC50c1wiIC8+XG5cblxuaW50ZXJmYWNlIFNjcmVlcCBleHRlbmRzIENyZWVwLCBTdXBlckNyZWVwe1xuICAgIGpvYj8gOiBKb2I7XG59XG5cbmNsYXNzIFN1cGVyQ3JlZXAge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBib2R5OiB7XG5cbiAgICAgICAgLyoqIE9uZSBvZiB0aGUgYm9keSBwYXJ0cyBjb25zdGFudHMuICovXG4gICAgICAgIHR5cGU6IHN0cmluZztcblxuICAgICAgICAvKiogVGhlIHJlbWFpbmluZyBhbW91bnQgb2YgaGl0IHBvaW50cyBvZiB0aGlzIGJvZHkgcGFydC4gKi9cbiAgICAgICAgaGl0czogbnVtYmVyXG5cbiAgICB9W107XG5cblxuICAgIGhvd01hbnlQYXJ0cyhwYXJ0OnN0cmluZyk6bnVtYmVyIHtcbiAgICAgIHJldHVybiB0aGlzLmJvZHkuZmlsdGVyKHMgPT4geyByZXR1cm4gKHMudHlwZSA9PSBwYXJ0ICYmIHMuaGl0cyA+IDApIH0pLmxlbmd0aCBcbiAgICB9XG5cbiAgICBoYXNQYXJ0KHBhcnQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuaG93TWFueVBhcnRzKHBhcnQpID4gMFxuICAgIH1cblxuICAgIGNhbk1vdmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1BhcnQoTU9WRSk7XG4gICAgfVxuXG4gICAgY2FuV29yaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzUGFydChXT1JLKTtcbiAgICB9XG5cbiAgICBjYW5IZWFsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQYXJ0KEhFQUwpO1xuICAgIH1cblxuICAgIGNhbkF0dGFjaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzUGFydChBVFRBQ0spO1xuICAgIH1cblxuICAgIGNhblNob290KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQYXJ0KFJBTkdFRF9BVFRBQ0spO1xuICAgIH1cblxuICAgIGNhbkNsYWltKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNQYXJ0KENMQUlNKTtcbiAgICB9XG5cbiAgICBsb2coLi4ubXNnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1wiK3RoaXMubmFtZStcIl1cIiwgLi4ubXNnKVxuICAgIH1cbn1cblxuXG5cblxuZnVuY3Rpb24gYXBwbHlNaXhpbnMoZGVyaXZlZEN0b3I6IGFueSwgYmFzZUN0b3JzOiBhbnlbXSkge1xuICAgIGJhc2VDdG9ycy5mb3JFYWNoKGJhc2VDdG9yID0+IHtcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYmFzZUN0b3IucHJvdG90eXBlKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgICAgZGVyaXZlZEN0b3IucHJvdG90eXBlW25hbWVdID0gYmFzZUN0b3IucHJvdG90eXBlW25hbWVdO1xuICAgICAgICB9KVxuICAgIH0pOyBcbn1cblxuXG5hcHBseU1peGlucyhDcmVlcCwgW1N1cGVyQ3JlZXBdKVxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwic2NyZWVwcy5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJnbG9iYWxzLnRzXCIgLz5cblxuLy9yZXF1aXJlKCdnbG9iYWxzJylcblxuLy8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3VwZXJDcmVlcC5wcm90b3R5cGUpLmZvckVhY2gobmFtZSA9PiB7XG4vLyAgIENyZWVwLnByb3RvdHlwZVtuYW1lXSA9IFN1cGVyQ3JlZXAucHJvdG90eXBlW25hbWVdXG4vLyB9KVxuXG50eXBlIEpvYkZ1bmMgPSAoY3JlZXA6IFNjcmVlcCwgam9iOiBKb2IpID0+IG51bWJlcjtcbnR5cGUgQ3JlZXBGaWx0ZXIgPSAoY3JlZXA6IFNjcmVlcCkgPT4gYm9vbGVhbjtcbnR5cGUgQ3JlZXBDbXAgPSAoYTogQ3JlZXAsIGI6IFNjcmVlcCkgPT4gbnVtYmVyO1xuXG5cblxuaW50ZXJmYWNlIFBvc2l0aW9uRW50aXR5IHtcbiAgICBwb3MgOiBSb29tUG9zaXRpb25cbiAgICBpZCA6IHN0cmluZ1xufVxuXG5cbmNsYXNzIEpvYiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN0YXJ0OiBQb3NpdGlvbkVudGl0eTtcbiAgICBlbmQ6IFBvc2l0aW9uRW50aXR5O1xuICAgIGpvYkZ1bmM6IEpvYkZ1bmM7XG4gICAgY2FuZGlkYXRlRmlsdGVyOiBDcmVlcEZpbHRlcjtcbiAgICBjYW5kaWRhdGVDbXA6IENyZWVwQ21wO1xuICAgIGNyZWVwOiBTY3JlZXA7IC8vIFNldCBkdXJpbmcgZXhlY3V0aW9uZ1xuXG5cbiAgICBjb25zdHJ1Y3RvcihvcHRzPXt9KSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG9wdHNbJ25hbWUnXVxuICAgICAgICB0aGlzLnN0YXJ0ID0gb3B0c1snc3RhcnQnXVxuICAgICAgICB0aGlzLmVuZCA9IG9wdHNbJ2VuZCddXG4gICAgICAgIHRoaXMuam9iRnVuYyA9IG9wdHNbJ2pvYkZ1bmMnXVxuICAgICAgICB0aGlzLmNhbmRpZGF0ZUZpbHRlciA9IG9wdHNbJ2NhbmRpZGF0ZUZpbHRlciddXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlQ21wID0gb3B0c1snY2FuZGlkYXRlQ21wJ11cbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHZhciBqb2JGbiA6YW55ID0gdGhpcy5qb2JGdW5jO1xuICAgICAgICB2YXIgZmlsdGVyRm46YW55ID0gdGhpcy5jYW5kaWRhdGVGaWx0ZXI7XG4gICAgICAgIHZhciBjbXBGbjphbnkgPSB0aGlzLmNhbmRpZGF0ZUNtcDtcbiAgICAgICAgdmFyIHJldCA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LmlkLFxuICAgICAgICAgICAgam9iRnVuYzogUm9sZXNSZXZlcnNlW2pvYkZuXSxcbiAgICAgICAgICAgIGNhbmRpZGF0ZUZpbHRlcjogRmlsdGVyc1JldmVyc2VbZmlsdGVyRm5dLFxuICAgICAgICAgICAgY2FuZGlkYXRlQ21wOiBDbXBSZXZlcnNlW2NtcEZuXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgIGlmICh0aGlzLmVuZCAhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgIHJldFsnZW5kJ10gPSB0aGlzLmVuZC5pZDtcbiAgICAgICAgIH1cbiAgICAgICAgIHJldHVybiByZXRcbiAgICB9XG59XG5cbnZhciBwYXJzZUpvYiA9IChrIDpzdHJpbmcsIHYpOmFueSA9PiB7XG4gICAgc3dpdGNoIChrKSB7XG4gICAgICAgIGNhc2UgJ3N0YXJ0JywnZW5kJzpcbiAgICAgICAgICAgIHJldHVybiBHYW1lLmdldE9iamVjdEJ5SWQodilcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2pvYkZ1bmMnOlxuICAgICAgICAgICAgcmV0dXJuIFJvbGVzW3ZdO1xuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2FuZGlkYXRlRmlsdGVyJzpcbiAgICAgICAgICAgIHJldHVybiBGaWx0ZXJzW3ZdO1xuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2FuZGlkYXRlQ21wJzpcbiAgICAgICAgICAgIHJldHVybiBDbXBbdl07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdlxufVxuXG5cbnZhciBzZXRKb2IgPSAoY3JlZXAgOlNjcmVlcCwgam9iOkpvYikgPT4ge1xuICAgIE1lbW9yeVsnam9iX3dvcmtlcnMnXVtqb2IubmFtZV0gPSBjcmVlcC5uYW1lO1xuICAgIGpvYi5jcmVlcCA9IGNyZWVwO1xuICAgIGNyZWVwLmpvYiA9IGpvYjtcbn1cblxuXG52YXIgUm9sZXM6IHsgW2luZGV4OiBzdHJpbmddOiBKb2JGdW5jIH0gPSB7XG4gICAgbWVnYU1pbmVyOiAoY3JlZXA6IFNjcmVlcCwgam9iOiBKb2IpOiBudW1iZXIgPT4ge1xuICAgICAgICBjcmVlcC5sb2coam9iLm5hbWUpXG4gICAgICAgIHZhciBzb3VyY2VJZCA9IGNyZWVwLm1lbW9yeS5zSWQ7XG5cbiAgICAgICAgdmFyIHNvdXJjZTtcbiAgICAgICAgaWYgKHNvdXJjZUlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc291cmNlID0gR2FtZS5nZXRPYmplY3RCeUlkKHNvdXJjZUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCFjcmVlcC5wb3MuaXNOZWFyVG8oam9iLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIGNyZWVwLm1vdmVUbyhqb2Iuc3RhcnQsIHsgcmV1c2VQYXRoOiAyMCwgbWF4T3BzOiAxMDAwIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjcmVlcC5sb2coam9iLnN0YXJ0KVxuICAgICAgICAgICAgc291cmNlID0gam9iLnN0YXJ0LnBvcy5maW5kQ2xvc2VzdEJ5UmFuZ2UoRklORF9TT1VSQ0VTKVxuICAgICAgICAgICAgaWYgKHNvdXJjZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjcmVlcC5tZW1vcnkuc0lkID0gc291cmNlLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgaWYgKHNvdXJjZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgIHZhciBlcnIgPSBjcmVlcC5oYXJ2ZXN0KHNvdXJjZSk7XG4gICAgICAgICBpZiAoZXJyID09IEVSUl9OT1RfSU5fUkFOR0UpIHtcbiAgICAgICAgICAgICBlcnIgPSBjcmVlcC5tb3ZlVG8oc291cmNlKTtcbiAgICAgICAgIH0gXG4gICAgICAgfVxuICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxufVxudmFyIFJvbGVzUmV2ZXJzZSA9IHt9XG5mb3IgKHZhciBybiBvZiBPYmplY3Qua2V5cyhSb2xlcykpIHtcbiAgICB2YXIgZm4gOmFueSA9IFJvbGVzW3JuXVxuICAgIFJvbGVzUmV2ZXJzZVtmbl0gPSByblxufVxuXG5cbnZhciBGaWx0ZXJzOiB7IFtpbmRleDogc3RyaW5nXTogQ3JlZXBGaWx0ZXIgfSA9IHtcbiAgICB3b3Jrc0FuZE1vdmVzOiAoY3JlZXA6IFNjcmVlcCkgPT4ge1xuICAgICAgICByZXR1cm4gY3JlZXAuY2FuV29yaygpICYmIGNyZWVwLmNhbk1vdmUoKTtcbiAgICB9XG5cbn1cbnZhciBGaWx0ZXJzUmV2ZXJzZSA9IHt9XG5mb3IgKHZhciBybiBvZiBPYmplY3Qua2V5cyhGaWx0ZXJzKSkge1xuICAgIHZhciBmbiA6YW55ID0gRmlsdGVyc1tybl1cbiAgICBGaWx0ZXJzUmV2ZXJzZVtmbl0gPSByblxufVxuXG52YXIgQ21wOiB7IFtpbmRleDogc3RyaW5nXTogQ3JlZXBDbXAgfSA9IHtcbiAgICB3b3Jrc0hhcmQ6IChhOiBTY3JlZXAsIGI6IFNjcmVlcCk6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiBiLmhvd01hbnlQYXJ0cyhXT1JLKSAtIGEuaG93TWFueVBhcnRzKFdPUkspXG4gICAgfSxcbiAgICAvLyBjbG9zZVRvU3RhcnQ6IChhOkNyZWVwLCBiOkNyZWVwKSA6IG51bWJlciA9PiB7XG4gICAgLy8gICAgIHJldHVybiBhLnBvcy5nZXRSYW5nZVRvKGNyZWVwLmpvYi5zdGFydCkgLSBiLnBvcy5nZXRSYW5nZVRvKGNyZWVwLmpvYi5zdGFydCk7XG4gICAgLy8gfVxufVxudmFyIENtcFJldmVyc2UgPSB7fVxuZm9yICh2YXIgcm4gb2YgT2JqZWN0LmtleXMoQ21wKSkge1xuICAgIHZhciBmbiA6YW55ID0gQ21wW3JuXTtcbiAgICBDbXBSZXZlcnNlW2ZuXSA9IHJuO1xufTtcblxuXG5cbnZhciBqb2JzOiBKb2JbXSA9IFtuZXcgSm9iKHtcbiAgICBuYW1lOiBcIm1lZ2FfbWluZXJfMVwiLFxuICAgIHN0YXJ0OiBHYW1lLmZsYWdzWydNaW5lXzFfMSddLFxuICAgIGpvYkZ1bmM6IFJvbGVzWydtZWdhTWluZXInXSxcbiAgICBjYW5kaWRhdGVGaWx0ZXI6IEZpbHRlcnNbJ3dvcmtzQW5kTW92ZXMnXSxcbiAgICBjYW5kaWRhdGVDbXA6IENtcFsnd29ya3NIYXJkJ10sXG59KSxuZXcgSm9iKHtcbiAgICBuYW1lOiBcIm1lZ2FfbWluZXJfMlwiLFxuICAgIHN0YXJ0OiBHYW1lLmZsYWdzWydNaW5lXzFfMiddLFxuICAgIGpvYkZ1bmM6IFJvbGVzWydtZWdhTWluZXInXSxcbiAgICBjYW5kaWRhdGVGaWx0ZXI6IEZpbHRlcnNbJ3dvcmtzQW5kTW92ZXMnXSxcbiAgICBjYW5kaWRhdGVDbXA6IENtcFsnd29ya3NIYXJkJ10sXG59KV1cblxuXG5jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShqb2JzKSlcblxuY29uc29sZS5sb2coSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShqb2JzWzBdKSxwYXJzZUpvYikuam9iRnVuYylcblxuLy92YXIgam9iczpKb2JbXSA9IFtdXG5cblxuLy8gVE9ETzogQVBJIHRvIGFkZCBqb2JzLCBzb21lIHdheSB0byBjb21iaW5lIGluLW1lbW9yeSBqb2JzIHdpdGggaW4tY29kZSBqb2JzXG4vLyBmaXRuZXNzIGZ1bmMgZm9yIGNhbmRpZGF0ZXMgYmFzZWQgb24gZGlzdGFuY2UuXG5cbmlmIChNZW1vcnlbJ2pvYl93b3JrZXJzJ10gPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5sb2coXCJyZXBsYWNpbmcgd29ya2VyIG1hcDEhIVwiKVxuICAgIE1lbW9yeVsnam9iX3dvcmtlcnMnXSA9IHt9XG59XG4vLzoge1tpbmRleDpzdHJpbmddOnN0cmluZ31cblxuLy8gOiBmdW5jdGlvbihDcmVlcCk6Ym9vbGVhbiBcblxuLy92YXIgY3JlZXBzIDoge1tpbmRleDpudW1iZXJdOkNyZWVwLCBwdXNoKGM6Q3JlZXApLGZpbHRlcihmbikgfSA9IFtdXG52YXIgY3JlZXBzOlNjcmVlcFtdID0gW11cbmZvciAodmFyIG4gb2YgT2JqZWN0LmtleXMoR2FtZS5jcmVlcHMpKSB7XG4gICAgY3JlZXBzLnB1c2goR2FtZS5jcmVlcHNbbl0pXG59XG5cbnZhciBzZWVuSm9iczogeyBbaW5kZXg6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9XG52YXIgZW1wdHlKb2JzOkpvYltdID0gW11cblxuXG5mb3IgKHZhciBqb2Igb2Ygam9icykge1xuICAgIC8vIENoZWNrIGZvciBEdXBlXG4gICAgaWYgKHNlZW5Kb2JzW2pvYi5uYW1lXSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkRVUExJQ0FURSBKT0IgSU4gTElTVCEhIFwiICsgam9iLm5hbWUpXG4gICAgfVxuICAgIHNlZW5Kb2JzW2pvYi5uYW1lXSA9IHRydWVcblxuICAgIHZhciBjcmVlcE5hbWUgOnN0cmluZyA9IE1lbW9yeVsnam9iX3dvcmtlcnMnXVtqb2IubmFtZV07XG4gICAgdmFyIGNyZWVwIDogU2NyZWVwO1xuICAgIGlmIChjcmVlcE5hbWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyZWVwID0gR2FtZS5jcmVlcHNbY3JlZXBOYW1lXVxuICAgICAgICBpZiAoY3JlZXAgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkJhZCBjcmVlcCBmb3VuZCwgcmVwbGFjaW5nOiBcIiArIEpTT04uc3RyaW5naWZ5KGNyZWVwKSlcbiAgICAgICAgICAgIGRlbGV0ZSBNZW1vcnlbJ2pvYl93b3JrZXJzJ11bam9iLm5hbWVdO1xuICAgICAgICAgICAgY3JlZXBOYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0Sm9iKGNyZWVwLCBqb2IpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgaWYoY3JlZXBOYW1lID09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbXB0eUpvYnMucHVzaChqb2IpXG4gICAgfVxufVxuXG52YXIgbm9Kb2IgPSAoYyA6IFNjcmVlcCk6Ym9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIGMuam9iID09IHVuZGVmaW5lZFxufVxuXG5cbmZvciAodmFyIGpvYiBvZiBlbXB0eUpvYnMpIHtcbiAgICAvL3BpY2sgbmV3IG9uZVxuICAgIGNvbnNvbGUubG9nKFwiTmVlZCB0byByZXBsYWNlIGNyZWVwIGZvciBqb2IgXCIgKyBqb2IubmFtZSlcbiAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgY3VycnlpbmcgdG8gcGFzcyBqb2IgaW50byBjbXAgZnVuY3Rpb25cbiAgICAvLyBUT0RPIGZpbHRlciBvdXQgY3JlZXBzIHdpdGggam9ic1xuICAgIHZhciBjYW5kaWRhdGVzIDogU2NyZWVwW10gPSBjcmVlcHMuZmlsdGVyKG5vSm9iKS5maWx0ZXIoam9iLmNhbmRpZGF0ZUZpbHRlcikuc29ydChqb2IuY2FuZGlkYXRlQ21wKVxuICAgIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGNyZWVwIDogU2NyZWVwID0gY2FuZGlkYXRlc1swXTtcbiAgICAgICAgY29uc29sZS5sb2coXCJQaWNrZWQgY3JlZXAgZm9yIGpvYiBcIiArIGpvYi5uYW1lICsgXCIgZ290IFwiICsgY3JlZXAubmFtZSk7XG4gICAgICAgIHNldEpvYihjcmVlcCwgam9iKTtcbiAgICAgICAgLy8gY2FsbCBzZXRKb2I/Pz9cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm5vIGNhbmRpZGF0ZXMgZm9yIGpvYj1cIiArIGpvYi5uYW1lKVxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG59XG4gXG5qb2IgPSBudWxsXG5mb3IgKGNyZWVwIG9mIGNyZWVwcykge1xuICAgIGlmIChjcmVlcC5qb2IgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgY3JlZXAubG9nKFwiam9iPVwiK2NyZWVwLmpvYi5uYW1lKVxuICAgICAgICBjcmVlcC5qb2Iuam9iRnVuYyhjcmVlcCwgY3JlZXAuam9iKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWVwLmxvZyhcIk5vdGhpbmcgdG8gZG9cIilcbiAgICB9XG59XG5cbkdhbWUuUm9sZXMgPSBSb2xlcyJdfQ==